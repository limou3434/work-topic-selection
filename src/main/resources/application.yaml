# 配置框架(使用 java -jar app.jar --spring.profiles.active=develop | release | production 来启动项目, 其中 release 有时间就拿来测试, 而 production 存储在 Github 上, 每次修改 Github 配置就需要刷新(这个有时间可以优化为无需重启))
spring:
  ## 配置环境
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:develop} # 默认启动开发环境
  ## 配置名称
  application:
    name: work-topic-selection
  ## 配置重载
  devtools:
    restart:
      enabled: false
  ## 资源限制
  servlet:
    multipart:
      max-file-size: 10MB
  ## 配置数源
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/work_topic_selection
    username: wts
    password: Qwe54188_
  ## 配置缓存
  redis:
    database: 2 # Redis 数据库索引(默认为 0, 通常为了方便开发会认为 0 号为生产环境、1 号为测试环境、2 号为开发环境)
    host: 127.0.0.1 # Redis 服务器地址
    port: 6379 # Redis 服务器连接端口
    password: Qwe54188_ # Redis 服务器连接密码(默认为空)
    timeout: 10s # 连接超时时间
    lettuce:
      pool: # 链接池配置
        max-active: 200 # 连接池最大连接数
        max-wait: -1ms # 连接池最大阻塞等待时间(使用负值表示没有限制)
        max-idle: 10 # 连接池中的最大空闲连接
        min-idle: 0 # 连接池中的最小空闲连接
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  session:
    timeout: 2592000

# 配置服务
server:
  ## 配置地址
  address: 127.0.0.1
  ## 配置端口
  port: 8000
  # 配置前缀
  servlet:
    context-path: /
    session:
      cookie:
        max-age: 2592000
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: false
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: isDelete # 全局逻辑删除的实体字段名
      logic-delete-value: 1 # 逻辑已删除值（默认为 1）
      logic-not-delete-value: 0 # 逻辑未删除值（默认为 0）

# 配置日志
logging:
  level:
    # root: DEBUG # 如果需要仔细调试可以打开这个选项
    cn.com.edtechhub.worktopicselection: DEBUG # 控制本项目包内的日志输出等级 TRACE | DEBUG | INFO | WARN | ERROR | FATAL

# 配置文档
knife4j:
  enable: true
  openapi:
    title: "接口文档"
    version: 1.0
    group:
      default:
        api-rule: package
        api-rule-resources:
          - cn.com.edtechhub.worktopicselection.controller

# 配置 COS
cos:
  client:
    accessKey: ""
    host: ${COS_CLIENT_HOST} # 访问域名
    secretId: ${COS_CLIENT_SECRET_ID} # 密钥标识(SECRETID 和 SECRETKEY 请登录访问管理控制台 https://console.cloud.tencent.com/cam/capi 进行查看和管理)
    secretKey: ${COS_CLIENT_SECRET_KEY} # 密钥的值
    region: ${COS_CLIENT_REGION} # 地域简称(COS 地域的简称请参见 https://cloud.tencent.com/document/product/436/6224)
    bucket: ${COS_CLIENT_BUCKET} # 存储桶名
